[{"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\index.js":"1","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\reportWebVitals.js":"2","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\App.js":"3","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\Opener.js":"4","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Contender.js":"5","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\TournamentTree.js":"6","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Tree.js":"7","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Match.js":"8","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\MatchComponent.js":"9","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\MatchSiteComponent.js":"10","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Player.js":"11","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\SummaryWinnerComponent.js":"12","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\GeneralSummaryComponent.js":"13"},{"size":207,"mtime":1608143675363,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":4268,"mtime":1608579951777,"results":"17","hashOfConfig":"15"},{"size":2381,"mtime":1608571267104,"results":"18","hashOfConfig":"15"},{"size":578,"mtime":1608491664025,"results":"19","hashOfConfig":"15"},{"size":1945,"mtime":1608576126332,"results":"20","hashOfConfig":"15"},{"size":896,"mtime":1608490581119,"results":"21","hashOfConfig":"15"},{"size":529,"mtime":1608405729575,"results":"22","hashOfConfig":"15"},{"size":1632,"mtime":1608577797749,"results":"23","hashOfConfig":"15"},{"size":9742,"mtime":1608493640848,"results":"24","hashOfConfig":"15"},{"size":174,"mtime":1608335392251,"results":"25","hashOfConfig":"15"},{"size":2047,"mtime":1608493676511,"results":"26","hashOfConfig":"15"},{"size":1708,"mtime":1608504796105,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"gvisqz",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\index.js",[],["61","62"],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\reportWebVitals.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\App.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\Opener.js",["63","64"],"import React from \"react\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../styles/main.css\";\r\nimport OpenerStyle from \"../styles/opener-style.module.css\";\r\n\r\nexport const Opener = (props) => {\r\n    const history = useHistory();\r\n\r\n    const startTournament = () => {\r\n        history.push(\"/tournament\");\r\n    };\r\n\r\n    const alertMissingFiles = () => {\r\n        if (props.n1 === \"\") {\r\n            alert('Please enter tournament CSV')\r\n        } else if (props.n2 === \"\") {\r\n            alert('Please enter players CSV')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={OpenerStyle.container}>\r\n            <div className={OpenerStyle.openingTitle}>\r\n                <p>Let The Tournament Begin!</p>\r\n            </div>\r\n\r\n            <div className={OpenerStyle.leftCSV}>\r\n                <div className={`rounded-md ${OpenerStyle.x}`}>\r\n                    <CSVReader inputStyle={{height: '100%', width: '100%', opacity: '0'}} onFileLoaded={props.getCSV} />\r\n                    <div className={OpenerStyle.y}>\r\n                        <a>Select Tournament CSV </a>\r\n                    </div>\r\n                </div>\r\n                {props.n1 !== \"\" ? (<div>\r\n                    <p>{props.n1}</p>\r\n                    </div>) : null}\r\n            </div>\r\n            <div className={OpenerStyle.rightCSV}>\r\n                <div className={`rounded-md ${OpenerStyle.x}`}>\r\n                    <CSVReader inputStyle={{height: '100%', width: '100%', opacity: '0'}} onFileLoaded={props.getPlayersCSV} />\r\n                    <div className={OpenerStyle.y}>\r\n                        <a>Select Players CSV</a>\r\n                    </div>\r\n                </div>\r\n                {props.n2 !== \"\" ? (<div>\r\n                    <p>{props.n2}</p>\r\n                    </div>) : null}\r\n            </div>\r\n            <div className={OpenerStyle.openingButton}>\r\n                {props.n1 !== \"\" && props.n2 !== \"\" ? (<div>\r\n                    <p><button className={`rounded-md animate-bounce ${OpenerStyle.startTournamentButton}`} onClick={startTournament}>Start Tournament</button></p>\r\n                    </div>) : <button className={`rounded-md ${OpenerStyle.startTournamentButton}`} onClick={alertMissingFiles}>Start Tournament</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Opener;\r\n","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Contender.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\TournamentTree.js",["65"],"import React from \"react\";\r\nimport MatchComponent from \"./MatchComponent\";\r\nimport \"../styles/main.css\";\r\nimport TournamentTreeStyle from \"../styles/tournament-tree-style.module.css\";\r\n\r\nexport const TournamentTree = (props) => {\r\n    if (props.listOfContenders.length) {\r\n        console.log(props.players);\r\n\r\n        const tournamentTree = props.tournamentTree;\r\n        let threshold = props.listOfContenders.length / 2;\r\n        let current_match = -1;\r\n        let columnNumber = 1;\r\n        return (\r\n            tournamentTree.tree.map((match, index) => {\r\n            current_match++;\r\n\r\n            let stylingItem = {\r\n                gridColumnStart: columnNumber.toString(),\r\n                gridColumnEnd: (columnNumber + 1).toString(),\r\n                gridRowStart: (\r\n                    current_match * Math.pow(2, columnNumber - 1) +\r\n                    1\r\n                ).toString(),\r\n                gridRowEnd: (\r\n                    current_match * Math.pow(2, columnNumber - 1) +\r\n                    1 +\r\n                    Math.pow(2, columnNumber - 1)\r\n                ).toString(),\r\n                justifySelf: \"center\",\r\n                alignSelf: \"center\",\r\n                border: \"3px solid #e6b31e\",\r\n                width: \"10rem\",\r\n                height: \"4rem\",\r\n                paddingLeft: \"5px\",\r\n                margin: \"5px\",\r\n            };\r\n\r\n            if (current_match === threshold - 1) {\r\n                threshold /= 2;\r\n                current_match = -1;\r\n                columnNumber++;\r\n            }\r\n\r\n            return (\r\n                <MatchComponent\r\n                    key={match.id}\r\n                    stylingItem={stylingItem}\r\n                    match={match}\r\n                />\r\n            );\r\n        }));\r\n    } else {\r\n        return (\r\n            <div>\r\n                <p>empty</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default TournamentTree;\r\n","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Tree.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Match.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\MatchComponent.js",["66","67","68","69"],"import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../styles/main.css\";\r\nimport MatchComponentStyle from \"../styles/match-component-style.module.css\";\r\n\r\nexport const MatchComponent = (props) => {\r\n    const history = useHistory();\r\n\r\n    const handleClick = () => {\r\n        history.push(\"/match/\" + props.match.id);\r\n    };\r\n\r\n    const match = props.match;\r\n\r\n    return (\r\n        <div style={props.stylingItem} onClick={handleClick}>\r\n            <p className={MatchComponentStyle.matchId}> {match.id} </p>\r\n            <div className={MatchComponentStyle.matchContainer}>\r\n            {match.contender1 !== null ? (\r\n                \r\n                    <div className={MatchComponentStyle.matchContender}>\r\n                        <a className={match.contender1 === match.winner ? MatchComponentStyle.b : \"\"}>{match.contender1.name}</a>\r\n                        <a className={match.contender1 === match.winner ? MatchComponentStyle.b : \"\"}>{match.contender1score}</a>\r\n                    \r\n                </div>\r\n            ) : null}\r\n            {match.contender2 !== null ? (\r\n                \r\n                    <div className={MatchComponentStyle.matchContender}>\r\n                        <a className={match.contender2 === match.winner ? MatchComponentStyle.b : \"\"}>{match.contender2.name}</a>\r\n                        <a className={match.contender2 === match.winner ? MatchComponentStyle.b : \"\"}>{match.contender2score}</a>\r\n                    </div>\r\n                \r\n            ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default MatchComponent;\r\n","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\MatchSiteComponent.js",["70","71","72","73"],"import React, { useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nexport const MatchSiteComponent = (props) => {\r\n    const history = useHistory();\r\n    const [contender1hp, setContender1hp] = useState(100);\r\n    const [contender2hp, setContender2hp] = useState(100);\r\n    let dmgDone1 = 0;\r\n    let dmgDone2 = 0;\r\n\r\n    const radioRefs = [];\r\n    for (let i = 0; i < props.players.length * 2; i++) {\r\n        radioRefs.push(React.createRef());\r\n    }\r\n\r\n    const levels = [];\r\n    let level = (props.tournamentTree.tree.length + 1) / 2;\r\n    let j = 0;\r\n    levels.push(level - 1);\r\n    while (level > 1) {\r\n        level /= 2;\r\n        levels.push(levels[j] + level);\r\n        j++;\r\n    }\r\n\r\n    let { id } = useParams();\r\n    let currentMatch = props.tournamentTree.tree[parseInt(id)];\r\n\r\n    const hasTounamentEnded = () => {\r\n        return currentMatch.id === props.tournamentTree.tree.length - 1;\r\n    };\r\n\r\n    const goNext = () => {\r\n        setContender1hp(100);\r\n        setContender2hp(100);\r\n        history.push(\"/match/\" + String(parseInt(currentMatch.id) + 1));\r\n    };\r\n\r\n    const goPrev = () => {\r\n        setContender1hp(100);\r\n        setContender2hp(100);\r\n        history.push(\"/match/\" + String(parseInt(currentMatch.id) - 1));\r\n    };\r\n\r\n    const comeBack = () => {\r\n        history.push(\"/tournament\");\r\n    };\r\n\r\n    const endTournament = () => {\r\n        history.push(\"/winner-summary\");\r\n    };\r\n\r\n    const sleep = async (ms) => {\r\n        return new Promise((resolve) => setTimeout(resolve, ms));\r\n    };\r\n\r\n    const draw = async (a, b) => {\r\n        if (a <= 0 && b <= 0) {\r\n            setContender1hp(100);\r\n            setContender2hp(100);\r\n            await sleep(100).then(async () => {});\r\n            return await draw(contender1hp, contender2hp);\r\n        } else if (a <= 0) {\r\n            currentMatch.winner = currentMatch.contender2;\r\n            dmgDone1 = 100 - b;\r\n            dmgDone2 = 100 - a;\r\n            return;\r\n        } else if (b <= 0) {\r\n            currentMatch.winner = currentMatch.contender1;\r\n            dmgDone1 = 100 - b;\r\n            dmgDone2 = 100 - a;\r\n            return;\r\n        }\r\n\r\n        a -= Math.floor(Math.random() * 10) + 1;\r\n        b -= Math.floor(Math.random() * 10) + 1;\r\n\r\n        setContender1hp(a);\r\n        setContender2hp(b);\r\n\r\n        await sleep(100).then(async () => {\r\n            await draw(a, b);\r\n        });\r\n    };\r\n\r\n    const giveLevel = (id) => {\r\n        for (let i = 0; i < levels.length; i++) {\r\n            if (id <= levels[i]) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    const countNextMatchIndes = () => {\r\n        const treshold = levels[giveLevel(currentMatch.id)];\r\n        const prev_treshold = levels[giveLevel(currentMatch.id) - 1];\r\n\r\n        if (giveLevel(currentMatch.id) === 0) {\r\n            return treshold + Math.floor(currentMatch.id / 2) + 1;\r\n        } else {\r\n            return (\r\n                treshold +\r\n                Math.floor((currentMatch.id - prev_treshold - 1) / 2) +\r\n                1\r\n            );\r\n        }\r\n    };\r\n\r\n    const updateTree = () => {\r\n        const next_match_index = countNextMatchIndes();\r\n\r\n        if (currentMatch.id % 2 === 0) {\r\n            props.tournamentTree.tree[next_match_index].contender1 =\r\n                currentMatch.winner;\r\n        } else {\r\n            props.tournamentTree.tree[next_match_index].contender2 =\r\n                currentMatch.winner;\r\n        }\r\n    };\r\n\r\n    const updatePlayersStats = (c1s, c2s) => {\r\n        const c1 = props.tournamentTree.returnContender(\r\n            currentMatch.contender1.id\r\n        );\r\n        const c2 = props.tournamentTree.returnContender(\r\n            currentMatch.contender2.id\r\n        );\r\n\r\n        c1.numberOfMatches++;\r\n        c2.numberOfMatches++;\r\n\r\n        c1.additiveScore += c1s;\r\n        c2.additiveScore += c2s;\r\n    };\r\n\r\n    const updatePlayersDrawStats = () => {\r\n        console.log(\"dmg:\");\r\n        console.log(dmgDone1);\r\n        console.log(dmgDone2);\r\n        const c1 = props.tournamentTree.returnContender(\r\n            currentMatch.contender1.id\r\n        );\r\n        const c2 = props.tournamentTree.returnContender(\r\n            currentMatch.contender2.id\r\n        );\r\n\r\n        if (dmgDone1 > dmgDone2) {\r\n            c1.rafaelsVariable++;\r\n        } else {\r\n            c2.rafaelsVariable++;\r\n        }\r\n\r\n        c1.dmg += dmgDone1;\r\n        c2.dmg += dmgDone2;\r\n    };\r\n\r\n    const resolveBattle = async () => {\r\n        const playersVotes = [];\r\n        for (let i = 0; i < props.players.length; i++) {\r\n            playersVotes.push(2);\r\n        }\r\n\r\n        let contender1score = 0;\r\n        let contender2score = 0;\r\n        let currPlayer = -1;\r\n\r\n        for (let i = 0; i < radioRefs.length; i++) {\r\n            let curr = radioRefs[i].current.checked;\r\n            if (i % 2 === 0) {\r\n                currPlayer++;\r\n                if (curr) {\r\n                    contender1score++;\r\n                    playersVotes[currPlayer] = 1;\r\n                }\r\n            } else {\r\n                if (curr) {\r\n                    contender2score++;\r\n                }\r\n            }\r\n        }\r\n\r\n        currentMatch.contender1score = contender1score;\r\n        currentMatch.contender2score = contender2score;\r\n\r\n        if (contender1score === contender2score) {\r\n            await draw(contender1hp, contender2hp);\r\n            updatePlayersDrawStats();\r\n        }\r\n\r\n        if (\r\n            contender1score > contender2score ||\r\n            currentMatch.winner === currentMatch.contender1\r\n        ) {\r\n            currentMatch.winner = currentMatch.contender1;\r\n\r\n            for (let i = 0; i < props.players.length; i++) {\r\n                if (playersVotes[i] === 1) {\r\n                    props.players[i].correctAnswers++;\r\n                }\r\n            }\r\n        } else if (\r\n            contender1score < contender2score ||\r\n            currentMatch.winner === currentMatch.contender2\r\n        ) {\r\n            currentMatch.winner = currentMatch.contender2;\r\n\r\n            for (let i = 0; i < props.players.length; i++) {\r\n                if (playersVotes[i] === 2) {\r\n                    props.players[i].correctAnswers++;\r\n                }\r\n            }\r\n        }\r\n\r\n        updatePlayersStats(contender1score, contender2score);\r\n\r\n        console.log(props.players);\r\n        if (!hasTounamentEnded()) {\r\n            updateTree();\r\n        } else {\r\n            endTournament();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <p>id: {currentMatch.id}</p>\r\n            {currentMatch.isEmpty() ? (\r\n                <div>\r\n                    <div>\r\n                        <p>contender1 :{currentMatch.contender1.name}</p>\r\n                        {currentMatch.contender1.isImg() ? (\r\n                            <p>\r\n                                <img src={currentMatch.contender1.url}></img>\r\n                            </p>\r\n                        ) : (\r\n                            <p>\r\n                                <iframe\r\n                                    src={currentMatch.contender1.url}\r\n                                    allowFullScreen\r\n                                ></iframe>\r\n                            </p>\r\n                        )}\r\n                        <progress max=\"100\" value={contender1hp}></progress>\r\n                        <p>{contender1hp}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>contender2 :{currentMatch.contender2.name}</p>\r\n                        {currentMatch.contender2.isImg() ? (\r\n                            <p>\r\n                                <img src={currentMatch.contender2.url}></img>\r\n                            </p>\r\n                        ) : (\r\n                            <p>\r\n                                <iframe\r\n                                    src={currentMatch.contender2.url}\r\n                                    allowFullScreen\r\n                                ></iframe>\r\n                            </p>\r\n                        )}\r\n                        <progress max=\"100\" value={contender2hp}></progress>\r\n                        <p>{contender2hp}</p>\r\n                    </div>\r\n\r\n                    {props.players.map((player, index) => (\r\n                        <div>\r\n                            <p>{player.name}</p>\r\n                            <div>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name={player.name}\r\n                                    value={currentMatch.contender1.name}\r\n                                    ref={radioRefs[2 * index]}\r\n                                    defaultChecked=\"false\"\r\n                                ></input>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name={player.name}\r\n                                    value={currentMatch.contender2.name}\r\n                                    ref={radioRefs[2 * index + 1]}\r\n                                    defaultChecked=\"false\"\r\n                                ></input>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n\r\n                    <button onClick={goNext}>Thank you, next</button>\r\n                    <button onClick={goPrev}>Thank you, prev</button>\r\n                    <button onClick={comeBack}>GO back</button>\r\n                    <button onClick={resolveBattle}> BATTLE </button>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MatchSiteComponent;\r\n","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Player.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\SummaryWinnerComponent.js",["74","75"],"import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const SummaryWinnerComponent = (props) => {\r\n    const history = useHistory();\r\n    const winner =\r\n        props.tournamentTree.tree[props.tournamentTree.tree.length - 1].winner;\r\n\r\n    const proceed = () => {\r\n        history.push(\"/general-summary\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"winner-left\">\r\n                <p>WINNER!!!</p>\r\n                <p>{winner.name}</p>\r\n\r\n                {winner.isImg() ? (\r\n                    <p>\r\n                        <img src={winner.url}></img>\r\n                    </p>\r\n                ) : (\r\n                    <p>\r\n                        <iframe src={winner.url} allowFullScreen></iframe>\r\n                    </p>\r\n                )}\r\n            </div>\r\n            <div className=\"winner-right\">\r\n                {props.tournamentTree.tree.map((match, index) =>\r\n                    match.contender1 === winner ? (\r\n                        <div>\r\n                            <p>\r\n                                {\" \"}\r\n                                {match.contender1score} :{\" \"}\r\n                                {match.contender2score}{\" \"}\r\n                            </p>\r\n                            <p> Against </p>\r\n                            <p> {match.contender2.name} </p>\r\n                        </div>\r\n                    ) : match.contender2 === winner ? (\r\n                        <div>\r\n                            <p>\r\n                                {\" \"}\r\n                                {match.contender1score} :{\" \"}\r\n                                {match.contender2score}{\" \"}\r\n                            </p>\r\n                            <p> Against </p>\r\n                            <p> {match.contender1.name} </p>\r\n                        </div>\r\n                    ) : null\r\n                )}\r\n            </div>\r\n            <button onClick={proceed}>Next</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SummaryWinnerComponent;\r\n","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\GeneralSummaryComponent.js",["76","77"],"import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const GeneralSummaryComponent = (props) => {\r\n    const history = useHistory();\r\n\r\n    const clickHandle = () => {\r\n        history.push(\"/\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <table>\r\n                <tr>\r\n                    <th></th>\r\n                    <th>Name</th>\r\n                    <th>numberOfMatches</th>\r\n                    <th>Average Score</th>\r\n                    <th>Rafaels Variable</th>\r\n                    <th>Damage</th>\r\n                </tr>\r\n            </table>\r\n\r\n            {props.tournamentTree.contenders.map((contender) => (\r\n                <tr>\r\n                    <td width=\"10\" height=\"25\">\r\n                        {contender.isImg() ? (\r\n                            <p>\r\n                                <img src={contender.url}></img>\r\n                            </p>\r\n                        ) : (\r\n                            <p>\r\n                                <iframe\r\n                                    src={contender.url}\r\n                                    allowFullScreen\r\n                                ></iframe>\r\n                            </p>\r\n                        )}\r\n                    </td>\r\n                    <td>{contender.name}</td>\r\n                    <td>{contender.numberOfMatches}</td>\r\n                    <td>{contender.avgScore()}</td>\r\n                    <td>{contender.rafaelsVariable}</td>\r\n                    <td>{contender.dmg}</td>\r\n                </tr>\r\n            ))}\r\n\r\n            <button onClick={clickHandle}> END TOURNAMENT </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneralSummaryComponent;\r\n",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":32,"column":25,"nodeType":"84","endLine":32,"endColumn":28},{"ruleId":"82","severity":1,"message":"83","line":43,"column":25,"nodeType":"84","endLine":43,"endColumn":28},{"ruleId":"85","severity":1,"message":"86","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":27},{"ruleId":"82","severity":1,"message":"83","line":22,"column":25,"nodeType":"84","endLine":22,"endColumn":103},{"ruleId":"82","severity":1,"message":"83","line":23,"column":25,"nodeType":"84","endLine":23,"endColumn":103},{"ruleId":"82","severity":1,"message":"83","line":30,"column":25,"nodeType":"84","endLine":30,"endColumn":103},{"ruleId":"82","severity":1,"message":"83","line":31,"column":25,"nodeType":"84","endLine":31,"endColumn":103},{"ruleId":"89","severity":1,"message":"90","line":234,"column":33,"nodeType":"84","endLine":234,"endColumn":72},{"ruleId":"91","severity":1,"message":"92","line":238,"column":33,"nodeType":"84","endLine":241,"endColumn":34},{"ruleId":"89","severity":1,"message":"90","line":251,"column":33,"nodeType":"84","endLine":251,"endColumn":72},{"ruleId":"91","severity":1,"message":"92","line":255,"column":33,"nodeType":"84","endLine":258,"endColumn":34},{"ruleId":"89","severity":1,"message":"90","line":21,"column":25,"nodeType":"84","endLine":21,"endColumn":47},{"ruleId":"91","severity":1,"message":"92","line":25,"column":25,"nodeType":"84","endLine":25,"endColumn":66},{"ruleId":"89","severity":1,"message":"90","line":29,"column":33,"nodeType":"84","endLine":29,"endColumn":58},{"ruleId":"91","severity":1,"message":"92","line":33,"column":33,"nodeType":"84","endLine":36,"endColumn":34},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'TournamentTreeStyle' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","no-global-assign","no-unsafe-negation"]