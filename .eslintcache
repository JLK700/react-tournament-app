[{"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\index.js":"1","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\reportWebVitals.js":"2","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\App.js":"3","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\Opener.js":"4","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Contender.js":"5","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\TournamentTree.js":"6","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Tree.js":"7","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Match.js":"8","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\MatchComponent.js":"9","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\MatchSiteComponent.js":"10","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Player.js":"11","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\SummaryWinnerComponent.js":"12","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\GeneralSummaryComponent.js":"13"},{"size":207,"mtime":1608143675363,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":3902,"mtime":1608630860932,"results":"17","hashOfConfig":"15"},{"size":2381,"mtime":1608571267104,"results":"18","hashOfConfig":"15"},{"size":630,"mtime":1608661721169,"results":"19","hashOfConfig":"15"},{"size":2853,"mtime":1608663928995,"results":"20","hashOfConfig":"15"},{"size":896,"mtime":1608490581119,"results":"21","hashOfConfig":"15"},{"size":530,"mtime":1608588062576,"results":"22","hashOfConfig":"15"},{"size":1632,"mtime":1608577797749,"results":"23","hashOfConfig":"15"},{"size":14501,"mtime":1608836259499,"results":"24","hashOfConfig":"15"},{"size":174,"mtime":1608335392251,"results":"25","hashOfConfig":"15"},{"size":7916,"mtime":1608652903670,"results":"26","hashOfConfig":"15"},{"size":6332,"mtime":1608661174177,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"gvisqz",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\index.js",[],["61","62"],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\reportWebVitals.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\App.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\Opener.js",["63","64"],"import React from \"react\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../styles/main.css\";\r\nimport OpenerStyle from \"../styles/opener-style.module.css\";\r\n\r\nexport const Opener = (props) => {\r\n    const history = useHistory();\r\n\r\n    const startTournament = () => {\r\n        history.push(\"/tournament\");\r\n    };\r\n\r\n    const alertMissingFiles = () => {\r\n        if (props.n1 === \"\") {\r\n            alert('Please enter tournament CSV')\r\n        } else if (props.n2 === \"\") {\r\n            alert('Please enter players CSV')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={OpenerStyle.container}>\r\n            <div className={OpenerStyle.openingTitle}>\r\n                <p>Let The Tournament Begin!</p>\r\n            </div>\r\n\r\n            <div className={OpenerStyle.leftCSV}>\r\n                <div className={`rounded-md ${OpenerStyle.x}`}>\r\n                    <CSVReader inputStyle={{height: '100%', width: '100%', opacity: '0'}} onFileLoaded={props.getCSV} />\r\n                    <div className={OpenerStyle.y}>\r\n                        <a>Select Tournament CSV </a>\r\n                    </div>\r\n                </div>\r\n                {props.n1 !== \"\" ? (<div>\r\n                    <p>{props.n1}</p>\r\n                    </div>) : null}\r\n            </div>\r\n            <div className={OpenerStyle.rightCSV}>\r\n                <div className={`rounded-md ${OpenerStyle.x}`}>\r\n                    <CSVReader inputStyle={{height: '100%', width: '100%', opacity: '0'}} onFileLoaded={props.getPlayersCSV} />\r\n                    <div className={OpenerStyle.y}>\r\n                        <a>Select Players CSV</a>\r\n                    </div>\r\n                </div>\r\n                {props.n2 !== \"\" ? (<div>\r\n                    <p>{props.n2}</p>\r\n                    </div>) : null}\r\n            </div>\r\n            <div className={OpenerStyle.openingButton}>\r\n                {props.n1 !== \"\" && props.n2 !== \"\" ? (<div>\r\n                    <p><button className={`rounded-md animate-bounce ${OpenerStyle.startTournamentButton}`} onClick={startTournament}>Start Tournament</button></p>\r\n                    </div>) : <button className={`rounded-md ${OpenerStyle.startTournamentButton}`} onClick={alertMissingFiles}>Start Tournament</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Opener;\r\n","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Contender.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\TournamentTree.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Tree.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Match.js",[],["65","66"],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\MatchComponent.js",["67","68","69","70"],"import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../styles/main.css\";\r\nimport MatchComponentStyle from \"../styles/match-component-style.module.css\";\r\n\r\nexport const MatchComponent = (props) => {\r\n    const history = useHistory();\r\n\r\n    const handleClick = () => {\r\n        history.push(\"/match/\" + props.match.id);\r\n    };\r\n\r\n    const match = props.match;\r\n\r\n    return (\r\n        <div style={props.stylingItem} onClick={handleClick}>\r\n            <p className={MatchComponentStyle.matchId}> {match.id} </p>\r\n            <div className={MatchComponentStyle.matchContainer}>\r\n            {match.contender1 !== null ? (\r\n                \r\n                    <div className={MatchComponentStyle.matchContender}>\r\n                        <a className={match.contender1 === match.winner ? MatchComponentStyle.b : \"\"}>{match.contender1.name}</a>\r\n                        <a className={match.contender1 === match.winner ? MatchComponentStyle.b : \"\"}>{match.contender1score}</a>\r\n                    \r\n                </div>\r\n            ) : null}\r\n            {match.contender2 !== null ? (\r\n                \r\n                    <div className={MatchComponentStyle.matchContender}>\r\n                        <a className={match.contender2 === match.winner ? MatchComponentStyle.b : \"\"}>{match.contender2.name}</a>\r\n                        <a className={match.contender2 === match.winner ? MatchComponentStyle.b : \"\"}>{match.contender2score}</a>\r\n                    </div>\r\n                \r\n            ) : null}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default MatchComponent;\r\n","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\MatchSiteComponent.js",["71","72","73","74"],"import React, { useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport \"../styles/main.css\";\r\nimport MatchSiteComponentStyle from \"../styles/match-site-component-style.module.css\";\r\n\r\nexport const MatchSiteComponent = (props) => {\r\n    const history = useHistory();\r\n    const [contender1hp, setContender1hp] = useState(100);\r\n    const [contender2hp, setContender2hp] = useState(100);\r\n    const [contender1won, setContender1won] = useState(false);\r\n    const [contender2won, setContender2won] = useState(false);\r\n    let dmgDone1 = 0;\r\n    let dmgDone2 = 0;\r\n\r\n    const radioRefs = [];\r\n    for (let i = 0; i < props.players.length * 2; i++) {\r\n        radioRefs.push(React.createRef());\r\n    }\r\n\r\n    const resetRadio = () => {\r\n        for (let i = 0; i < radioRefs.length; i++) {\r\n            radioRefs[i].current.checked = false;\r\n        }\r\n    };\r\n\r\n    const levels = [];\r\n    let level = (props.tournamentTree.tree.length + 1) / 2;\r\n    let j = 0;\r\n    levels.push(level - 1);\r\n    while (level > 1) {\r\n        level /= 2;\r\n        levels.push(levels[j] + level);\r\n        j++;\r\n    }\r\n\r\n    let { id } = useParams();\r\n    let currentMatch = props.tournamentTree.tree[parseInt(id)];\r\n\r\n    const hasTounamentEnded = () => {\r\n        return currentMatch.id === props.tournamentTree.tree.length - 1;\r\n    };\r\n\r\n    const endTournament = () => {\r\n        history.push(\"/winner-summary\");\r\n    };\r\n\r\n    const goNext = () => {\r\n        setContender1hp(100);\r\n        setContender2hp(100);\r\n        setContender1won(false);\r\n        setContender2won(false);\r\n        resetRadio();\r\n        if (!hasTounamentEnded()) {\r\n            history.push(\"/match/\" + String(parseInt(currentMatch.id) + 1));\r\n        } else {\r\n            endTournament();\r\n        }\r\n    };\r\n\r\n    const goPrev = () => {\r\n        setContender1hp(100);\r\n        setContender2hp(100);\r\n        setContender1won(false);\r\n        setContender2won(false);\r\n        history.push(\"/match/\" + String(parseInt(currentMatch.id) - 1));\r\n    };\r\n\r\n    const goBack = () => {\r\n        history.push(\"/tournament\");\r\n    };\r\n\r\n    const sleep = async (ms) => {\r\n        return new Promise((resolve) => setTimeout(resolve, ms));\r\n    };\r\n\r\n    const draw = async (a, b) => {\r\n        if (a <= 0 && b <= 0) {\r\n            setContender1hp(100);\r\n            setContender2hp(100);\r\n            await sleep(10).then(async () => {});\r\n            return await draw(contender1hp, contender2hp);\r\n        } else if (a <= 0) {\r\n            currentMatch.winner = currentMatch.contender2;\r\n            setContender2won(true);\r\n            dmgDone1 = 100 - b;\r\n            dmgDone2 = 100 - a;\r\n            return;\r\n        } else if (b <= 0) {\r\n            currentMatch.winner = currentMatch.contender1;\r\n            setContender1won(true);\r\n            dmgDone1 = 100 - b;\r\n            dmgDone2 = 100 - a;\r\n            return;\r\n        }\r\n\r\n        a -= Math.floor(Math.random() * 10) + 1;\r\n        b -= Math.floor(Math.random() * 10) + 1;\r\n\r\n        setContender1hp(a);\r\n        setContender2hp(b);\r\n\r\n        await sleep(10).then(async () => {\r\n            await draw(a, b);\r\n        });\r\n    };\r\n\r\n    const giveLevel = (id) => {\r\n        for (let i = 0; i < levels.length; i++) {\r\n            if (id <= levels[i]) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n\r\n    const countNextMatchIndes = () => {\r\n        const treshold = levels[giveLevel(currentMatch.id)];\r\n        const prev_treshold = levels[giveLevel(currentMatch.id) - 1];\r\n\r\n        if (giveLevel(currentMatch.id) === 0) {\r\n            return treshold + Math.floor(currentMatch.id / 2) + 1;\r\n        } else {\r\n            return (\r\n                treshold +\r\n                Math.floor((currentMatch.id - prev_treshold - 1) / 2) +\r\n                1\r\n            );\r\n        }\r\n    };\r\n\r\n    const updateTree = () => {\r\n        const next_match_index = countNextMatchIndes();\r\n\r\n        if (currentMatch.id % 2 === 0) {\r\n            props.tournamentTree.tree[next_match_index].contender1 =\r\n                currentMatch.winner;\r\n        } else {\r\n            props.tournamentTree.tree[next_match_index].contender2 =\r\n                currentMatch.winner;\r\n        }\r\n    };\r\n\r\n    const updatePlayersStats = (c1s, c2s) => {\r\n        const c1 = props.tournamentTree.returnContender(\r\n            currentMatch.contender1.id\r\n        );\r\n        const c2 = props.tournamentTree.returnContender(\r\n            currentMatch.contender2.id\r\n        );\r\n\r\n        c1.numberOfMatches++;\r\n        c2.numberOfMatches++;\r\n\r\n        c1.additiveScore += c1s;\r\n        c2.additiveScore += c2s;\r\n    };\r\n\r\n    const updatePlayersDrawStats = () => {\r\n        console.log(\"dmg:\");\r\n        console.log(dmgDone1);\r\n        console.log(dmgDone2);\r\n        const c1 = props.tournamentTree.returnContender(\r\n            currentMatch.contender1.id\r\n        );\r\n        const c2 = props.tournamentTree.returnContender(\r\n            currentMatch.contender2.id\r\n        );\r\n\r\n        if (dmgDone1 > dmgDone2) {\r\n            c1.rafaelsVariable++;\r\n        } else {\r\n            c2.rafaelsVariable++;\r\n        }\r\n\r\n        c1.dmg += dmgDone1;\r\n        c2.dmg += dmgDone2;\r\n    };\r\n\r\n    const kill = (a, b) => {\r\n        const c1 = props.tournamentTree.returnContender(\r\n            currentMatch.contender1.id\r\n        );\r\n        const c2 = props.tournamentTree.returnContender(\r\n            currentMatch.contender2.id\r\n        );\r\n\r\n        c1.dmg += a;\r\n        c2.dmg += b;\r\n    };\r\n\r\n    const resolveBattle = async () => {\r\n        const playersVotes = [];\r\n        for (let i = 0; i < props.players.length; i++) {\r\n            playersVotes.push(2);\r\n        }\r\n\r\n        let contender1score = 0;\r\n        let contender2score = 0;\r\n        let currPlayer = -1;\r\n\r\n        for (let i = 0; i < radioRefs.length; i++) {\r\n            let curr = radioRefs[i].current.checked;\r\n            if (i % 2 === 0) {\r\n                currPlayer++;\r\n                if (curr) {\r\n                    contender1score++;\r\n                    playersVotes[currPlayer] = 1;\r\n                }\r\n            } else {\r\n                if (curr) {\r\n                    contender2score++;\r\n                }\r\n            }\r\n        }\r\n\r\n        currentMatch.contender1score = contender1score;\r\n        currentMatch.contender2score = contender2score;\r\n\r\n        if (contender1score === contender2score) {\r\n            await draw(contender1hp, contender2hp);\r\n            updatePlayersDrawStats();\r\n        }\r\n\r\n        if (\r\n            contender1score > contender2score ||\r\n            currentMatch.winner === currentMatch.contender1\r\n        ) {\r\n            currentMatch.winner = currentMatch.contender1;\r\n            setContender1won(true);\r\n\r\n            if (currentMatch.contender1score !== currentMatch.contender2score) {\r\n                setContender2hp(0);\r\n                kill(100, 0);\r\n            }\r\n\r\n            if (currentMatch.contender1score === currentMatch.contender2score) {\r\n                setContender2hp(100 - dmgDone1);\r\n                setContender2hp(100 - dmgDone1);\r\n                setContender2hp(100 - dmgDone1);\r\n            }\r\n\r\n            for (let i = 0; i < props.players.length; i++) {\r\n                if (playersVotes[i] === 1) {\r\n                    props.players[i].correctAnswers++;\r\n                }\r\n            }\r\n        } else if (\r\n            contender1score < contender2score ||\r\n            currentMatch.winner === currentMatch.contender2\r\n        ) {\r\n            currentMatch.winner = currentMatch.contender2;\r\n            setContender2won(true);\r\n\r\n            if (currentMatch.contender1score !== currentMatch.contender2score) {\r\n                setContender1hp(0);\r\n                kill(0, 100);\r\n            }\r\n\r\n            if (currentMatch.contender1score === currentMatch.contender2score) {\r\n                setContender1hp(100 - dmgDone2);\r\n                setContender1hp(100 - dmgDone2);\r\n                setContender1hp(100 - dmgDone2);\r\n            }\r\n\r\n            for (let i = 0; i < props.players.length; i++) {\r\n                if (playersVotes[i] === 2) {\r\n                    props.players[i].correctAnswers++;\r\n                }\r\n            }\r\n        }\r\n\r\n        updatePlayersStats(contender1score, contender2score);\r\n\r\n        console.log(props.players);\r\n        if (!hasTounamentEnded()) {\r\n            updateTree();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={MatchSiteComponentStyle.container}>\r\n            <div className={MatchSiteComponentStyle.matchTitle}>\r\n                <button\r\n                    className={`rounded-md ${MatchSiteComponentStyle.smallButton}`}\r\n                    onClick={goPrev}\r\n                >\r\n                    Previous\r\n                </button>\r\n\r\n                {giveLevel(currentMatch.id) === levels.length - 1 ? (\r\n                    <p>Final</p>\r\n                ) : giveLevel(currentMatch.id) === levels.length - 2 ? (\r\n                    <p>Semifinal</p>\r\n                ) : giveLevel(currentMatch.id) === levels.length - 3 ? (\r\n                    <p>Quaterfinal</p>\r\n                ) : (\r\n                    <p>Match: {currentMatch.id}</p>\r\n                )}\r\n\r\n                <button\r\n                    className={`rounded-md ${MatchSiteComponentStyle.smallButton}`}\r\n                    onClick={goBack}\r\n                >\r\n                    Back to Tournament Tree\r\n                </button>\r\n            </div>\r\n\r\n            {currentMatch.contender1 !== null ? (\r\n                <div className={MatchSiteComponentStyle.contender1}>\r\n                    <p\r\n                        className={\r\n                            contender1won\r\n                                ? MatchSiteComponentStyle.contenderNameBoosted\r\n                                : MatchSiteComponentStyle.contenderName\r\n                        }\r\n                    >\r\n                        {currentMatch.contender1.name}\r\n                    </p>\r\n                    {currentMatch.contender1.isImg() ? (\r\n                        <p>\r\n                            <img\r\n                                className={MatchSiteComponentStyle.image}\r\n                                src={currentMatch.contender1.url}\r\n                            ></img>\r\n                        </p>\r\n                    ) : (\r\n                        <p>\r\n                            <iframe\r\n                                className={MatchSiteComponentStyle.frame}\r\n                                src={currentMatch.contender1.url}\r\n                                allowFullScreen\r\n                            ></iframe>\r\n                        </p>\r\n                    )}\r\n                    <progress max=\"100\" value={contender1hp}></progress>\r\n                    <p>{contender1hp}</p>\r\n                </div>\r\n            ) : null}\r\n\r\n            {currentMatch.isActive() ? (\r\n                <div className={MatchSiteComponentStyle.players}>\r\n                    <div\r\n                        className={\r\n                            MatchSiteComponentStyle.radioButtonsContainer\r\n                        }\r\n                    >\r\n                        {props.players.map((player, index) => (\r\n                            <div\r\n                                className={MatchSiteComponentStyle.singlePlayer}\r\n                            >\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name={player.name}\r\n                                    value={currentMatch.contender1.name}\r\n                                    ref={radioRefs[2 * index]}\r\n                                    className=\"form-checkbox h-6 w-6\"\r\n                                ></input>\r\n                                <p>{player.name}</p>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    name={player.name}\r\n                                    value={currentMatch.contender2.name}\r\n                                    ref={radioRefs[2 * index + 1]}\r\n                                    className=\"form-checkbox h-6 w-6\"\r\n                                ></input>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n\r\n                    <div className={MatchSiteComponentStyle.buttons}>\r\n                        <button\r\n                            className={`rounded-md ${MatchSiteComponentStyle.bigButton}`}\r\n                            onClick={goNext}\r\n                        >\r\n                            Next\r\n                        </button>\r\n                        <button\r\n                            className={`rounded-md ${MatchSiteComponentStyle.bigButton}`}\r\n                            onClick={resolveBattle}\r\n                        >\r\n                            BATTLE\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n\r\n            {currentMatch.contender2 !== null ? (\r\n                <div className={MatchSiteComponentStyle.contender2}>\r\n                    <p\r\n                        className={\r\n                            contender2won\r\n                                ? MatchSiteComponentStyle.contenderNameBoosted\r\n                                : MatchSiteComponentStyle.contenderName\r\n                        }\r\n                    >\r\n                        {currentMatch.contender2.name}\r\n                    </p>\r\n                    {currentMatch.contender2.isImg() ? (\r\n                        <p>\r\n                            <img\r\n                                className={MatchSiteComponentStyle.image}\r\n                                src={currentMatch.contender2.url}\r\n                            ></img>\r\n                        </p>\r\n                    ) : (\r\n                        <p>\r\n                            <iframe\r\n                                className={MatchSiteComponentStyle.frame}\r\n                                src={currentMatch.contender2.url}\r\n                                allowFullScreen\r\n                            ></iframe>\r\n                        </p>\r\n                    )}\r\n                    <progress max=\"100\" value={contender2hp}></progress>\r\n                    <p>{contender2hp}</p>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MatchSiteComponent;\r\n","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\classes\\Player.js",[],"C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\SummaryWinnerComponent.js",["75","76","77","78","79","80","81","82","83","84","85","86"],"import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../styles/main.css\";\r\nimport SummaryWinnerComponentStyle from \"../styles/summary-winner-component-style.module.css\";\r\n\r\nexport const SummaryWinnerComponent = (props) => {\r\n    const history = useHistory();\r\n    const winner =\r\n        props.tournamentTree.tree[props.tournamentTree.tree.length - 1].winner;\r\n\r\n    const proceed = () => {\r\n        history.push(\"/general-summary\");\r\n    };\r\n\r\n    const endTournament = () => {\r\n        history.push(\"/\");\r\n    };\r\n\r\n    const goBack = () => {\r\n        history.push(\"/tournament\");\r\n    };\r\n\r\n    let size = Math.log2(props.tournamentTree.tree.length + 1);\r\n    const start = Math.log2(props.tournamentTree.tree.length + 1);\r\n\r\n    return (\r\n        <div className={SummaryWinnerComponentStyle.container}>\r\n            <div className={SummaryWinnerComponentStyle.title}>\r\n                <p>WINNER!!!</p>\r\n            </div>\r\n\r\n            <div className={SummaryWinnerComponentStyle.winnerLeft}>\r\n                <p>{winner.name}</p>\r\n\r\n                {winner.isImg() ? (\r\n                    <p>\r\n                        <img\r\n                            className={SummaryWinnerComponentStyle.image}\r\n                            src={winner.url}\r\n                        ></img>\r\n                    </p>\r\n                ) : (\r\n                    <p>\r\n                        <iframe\r\n                            className={SummaryWinnerComponentStyle.frame}\r\n                            src={winner.url}\r\n                            allowFullScreen\r\n                        ></iframe>\r\n                    </p>\r\n                )}\r\n            </div>\r\n            <div className={SummaryWinnerComponentStyle.winnerRight}>\r\n                {props.tournamentTree.tree.map((match, index) =>\r\n                    match.contender1 === winner ? (\r\n                        <div\r\n                            className={\r\n                                SummaryWinnerComponentStyle.singleMatchContainer\r\n                            }\r\n                        >\r\n                            <div\r\n                                className={\r\n                                    SummaryWinnerComponentStyle.singleMatchTitle\r\n                                }\r\n                            >\r\n                                {size === 1 ? (\r\n                                    <p>Final</p>\r\n                                ) : size === 2 ? (\r\n                                    <p>Semifinal</p>\r\n                                ) : size === 3 ? (\r\n                                    <p>Quaterfinal</p>\r\n                                ) : (\r\n                                    <p>Round {start - size + 1}</p>\r\n                                )}\r\n\r\n                                {console.log(size--)}\r\n                            </div>\r\n                            <div\r\n                                className={\r\n                                    SummaryWinnerComponentStyle.singleMatch\r\n                                }\r\n                            >\r\n                                <div\r\n                                    className={\r\n                                        SummaryWinnerComponentStyle.bigger\r\n                                    }\r\n                                >\r\n                                    <a\r\n                                        style={{\r\n                                            color: \" #e6b31e\",\r\n                                            fontWeight: \"bold\",\r\n                                            fontSize: \"2.7vh\",\r\n                                        }}\r\n                                    >\r\n                                        {match.contender1score}\r\n                                    </a>\r\n                                    <a> : </a>\r\n                                    <a> {match.contender2score} </a>\r\n                                </div>\r\n                                <a> vs </a>\r\n                                <a\r\n                                    className={\r\n                                        SummaryWinnerComponentStyle.bigger\r\n                                    }\r\n                                >\r\n                                    {match.contender2.name}\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    ) : match.contender2 === winner ? (\r\n                        <div\r\n                            className={\r\n                                SummaryWinnerComponentStyle.singleMatchContainer\r\n                            }\r\n                        >\r\n                            <div\r\n                                className={\r\n                                    SummaryWinnerComponentStyle.singleMatchTitle\r\n                                }\r\n                            >\r\n                                {size === 1 ? (\r\n                                    <p>Final</p>\r\n                                ) : size === 2 ? (\r\n                                    <p>Semifinal</p>\r\n                                ) : size === 3 ? (\r\n                                    <p>Quaterfinal</p>\r\n                                ) : (\r\n                                    <p>Round {start - size + 1}</p>\r\n                                )}\r\n                                {console.log(size--)}\r\n                            </div>\r\n                            <div\r\n                                className={\r\n                                    SummaryWinnerComponentStyle.singleMatch\r\n                                }\r\n                            >\r\n                                <div\r\n                                    className={\r\n                                        SummaryWinnerComponentStyle.bigger\r\n                                    }\r\n                                >\r\n                                    <a\r\n                                        style={{\r\n                                            color: \" #e6b31e\",\r\n                                            fontWeight: \"bold\",\r\n                                            fontSize: \"2.7vh\",\r\n                                        }}\r\n                                    >\r\n                                        {match.contender2score}\r\n                                    </a>\r\n                                    <a> : </a>\r\n                                    <a> {match.contender1score} </a>\r\n                                </div>\r\n                                <a> vs </a>\r\n                                <a\r\n                                    className={\r\n                                        SummaryWinnerComponentStyle.bigger\r\n                                    }\r\n                                >\r\n                                    {match.contender1.name}\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    ) : null\r\n                )}\r\n            </div>\r\n\r\n            <div className={SummaryWinnerComponentStyle.buttons}>\r\n                <button\r\n                    className={`rounded-md ${SummaryWinnerComponentStyle.button}`}\r\n                    onClick={proceed}\r\n                >\r\n                    General Summary\r\n                </button>\r\n\r\n                <button\r\n                    className={`rounded-md ${SummaryWinnerComponentStyle.button}`}\r\n                    onClick={goBack}\r\n                >\r\n                    Tournament Tree\r\n                </button>\r\n\r\n                <button\r\n                    className={`rounded-md ${SummaryWinnerComponentStyle.button}`}\r\n                    onClick={endTournament}\r\n                >\r\n                    End Tournament\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SummaryWinnerComponent;\r\n","C:\\Users\\Jan\\Documents\\tornament_web_application\\src\\components\\GeneralSummaryComponent.js",["87","88"],"import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../styles/main.css\";\r\nimport GeneralSummaryComponentStyle from \"../styles/general-summary-component-style.module.css\";\r\n\r\nexport const GeneralSummaryComponent = (props) => {\r\n    const history = useHistory();\r\n\r\n    const clickHandle = () => {\r\n        history.push(\"/\");\r\n    };\r\n\r\n    const goBack = () => {\r\n        history.push(\"/tournament\");\r\n    };\r\n\r\n    const onlyPitcures = () => {\r\n        for (let i = 0; i < props.tournamentTree.contenders.length; i++) {\r\n            if (!props.tournamentTree.contenders[i].isImg()) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    return (\r\n        <div className={GeneralSummaryComponentStyle.container}>\r\n            <div className={GeneralSummaryComponentStyle.title}>\r\n                <p>General Summary</p>\r\n            </div>\r\n\r\n            <table className={GeneralSummaryComponentStyle.table}>\r\n                <tr>\r\n                    <th\r\n                        className={\r\n                            onlyPitcures()\r\n                                ? GeneralSummaryComponentStyle.thPhotoOnly\r\n                                : GeneralSummaryComponentStyle.thPhotoFrame\r\n                        }\r\n                    >\r\n                        Photo/Video\r\n                    </th>\r\n                    <th className={GeneralSummaryComponentStyle.th}>Name</th>\r\n                    <th className={GeneralSummaryComponentStyle.th}>\r\n                        Number of Matches\r\n                    </th>\r\n                    <th className={GeneralSummaryComponentStyle.th}>\r\n                        Average Score\r\n                    </th>\r\n                    <th className={GeneralSummaryComponentStyle.th}>\r\n                        Rafaels Variable\r\n                    </th>\r\n                    <th className={GeneralSummaryComponentStyle.th}>Damage</th>\r\n                </tr>\r\n\r\n                {props.tournamentTree.contenders.map((contender) => (\r\n                    <tr>\r\n                        {contender.isImg() ? (\r\n                            <td className={GeneralSummaryComponentStyle.td}>\r\n                                <div\r\n                                    className={\r\n                                        GeneralSummaryComponentStyle.tdImage\r\n                                    }\r\n                                >\r\n                                    <img\r\n                                        className={\r\n                                            GeneralSummaryComponentStyle.i\r\n                                        }\r\n                                        src={contender.url}\r\n                                    ></img>\r\n                                </div>\r\n                            </td>\r\n                        ) : (\r\n                            <td className={GeneralSummaryComponentStyle.td}>\r\n                                <div\r\n                                    className={\r\n                                        GeneralSummaryComponentStyle.tdFrame\r\n                                    }\r\n                                >\r\n                                    <iframe\r\n                                        src={contender.url}\r\n                                        allowFullScreen\r\n                                        className={\r\n                                            GeneralSummaryComponentStyle.tdFrame\r\n                                        }\r\n                                    ></iframe>\r\n                                </div>\r\n                            </td>\r\n                        )}\r\n\r\n                        <td className={GeneralSummaryComponentStyle.td}>\r\n                            <div\r\n                                className={GeneralSummaryComponentStyle.tdName}\r\n                            >\r\n                                {contender.name}\r\n                            </div>\r\n                        </td>\r\n                        <td className={GeneralSummaryComponentStyle.td}>\r\n                            <div\r\n                                className={\r\n                                    GeneralSummaryComponentStyle.tdNumber\r\n                                }\r\n                            >\r\n                                {contender.numberOfMatches}\r\n                            </div>\r\n                        </td>\r\n                        <td className={GeneralSummaryComponentStyle.td}>\r\n                            <div\r\n                                className={\r\n                                    GeneralSummaryComponentStyle.tdNumber\r\n                                }\r\n                            >\r\n                                {contender.avgScore()}\r\n                            </div>\r\n                        </td>\r\n                        <td className={GeneralSummaryComponentStyle.td}>\r\n                            <div\r\n                                className={\r\n                                    GeneralSummaryComponentStyle.tdNumber\r\n                                }\r\n                            >\r\n                                {contender.rafaelsVariable}\r\n                            </div>\r\n                        </td>\r\n                        <td className={GeneralSummaryComponentStyle.td}>\r\n                            <div\r\n                                className={\r\n                                    GeneralSummaryComponentStyle.tdNumber\r\n                                }\r\n                            >\r\n                                {contender.dmg}\r\n                            </div>\r\n                        </td>\r\n                    </tr>\r\n                ))}\r\n            </table>\r\n\r\n            <div>\r\n                <button\r\n                    className={`rounded-md ${GeneralSummaryComponentStyle.button}`}\r\n                    onClick={goBack}\r\n                >\r\n                    Tournament Tree\r\n                </button>\r\n                <button\r\n                    className={`rounded-md ${GeneralSummaryComponentStyle.button}`}\r\n                    onClick={clickHandle}\r\n                >\r\n                    End Tournament\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneralSummaryComponent;\r\n",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":32,"column":25,"nodeType":"95","endLine":32,"endColumn":28},{"ruleId":"93","severity":1,"message":"94","line":43,"column":25,"nodeType":"95","endLine":43,"endColumn":28},{"ruleId":"89","replacedBy":"96"},{"ruleId":"91","replacedBy":"97"},{"ruleId":"93","severity":1,"message":"94","line":22,"column":25,"nodeType":"95","endLine":22,"endColumn":103},{"ruleId":"93","severity":1,"message":"94","line":23,"column":25,"nodeType":"95","endLine":23,"endColumn":103},{"ruleId":"93","severity":1,"message":"94","line":30,"column":25,"nodeType":"95","endLine":30,"endColumn":103},{"ruleId":"93","severity":1,"message":"94","line":31,"column":25,"nodeType":"95","endLine":31,"endColumn":103},{"ruleId":"98","severity":1,"message":"99","line":321,"column":29,"nodeType":"95","endLine":324,"endColumn":30},{"ruleId":"100","severity":1,"message":"101","line":328,"column":29,"nodeType":"95","endLine":332,"endColumn":30},{"ruleId":"98","severity":1,"message":"99","line":400,"column":29,"nodeType":"95","endLine":403,"endColumn":30},{"ruleId":"100","severity":1,"message":"101","line":407,"column":29,"nodeType":"95","endLine":411,"endColumn":30},{"ruleId":"98","severity":1,"message":"99","line":37,"column":25,"nodeType":"95","endLine":40,"endColumn":26},{"ruleId":"100","severity":1,"message":"101","line":44,"column":25,"nodeType":"95","endLine":48,"endColumn":26},{"ruleId":"93","severity":1,"message":"94","line":87,"column":37,"nodeType":"95","endLine":93,"endColumn":38},{"ruleId":"93","severity":1,"message":"94","line":96,"column":37,"nodeType":"95","endLine":96,"endColumn":40},{"ruleId":"93","severity":1,"message":"94","line":97,"column":37,"nodeType":"95","endLine":97,"endColumn":40},{"ruleId":"93","severity":1,"message":"94","line":99,"column":33,"nodeType":"95","endLine":99,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":100,"column":33,"nodeType":"95","endLine":104,"endColumn":34},{"ruleId":"93","severity":1,"message":"94","line":141,"column":37,"nodeType":"95","endLine":147,"endColumn":38},{"ruleId":"93","severity":1,"message":"94","line":150,"column":37,"nodeType":"95","endLine":150,"endColumn":40},{"ruleId":"93","severity":1,"message":"94","line":151,"column":37,"nodeType":"95","endLine":151,"endColumn":40},{"ruleId":"93","severity":1,"message":"94","line":153,"column":33,"nodeType":"95","endLine":153,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":154,"column":33,"nodeType":"95","endLine":158,"endColumn":34},{"ruleId":"98","severity":1,"message":"99","line":65,"column":37,"nodeType":"95","endLine":70,"endColumn":38},{"ruleId":"100","severity":1,"message":"101","line":80,"column":37,"nodeType":"95","endLine":86,"endColumn":38},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["102"],["103"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","no-global-assign","no-unsafe-negation"]